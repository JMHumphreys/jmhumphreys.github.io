[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Spatial Dynamics",
    "section": "",
    "text": "Hello\nLearning Quarto - work in progress!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About\nAbout this site\n\n\nHide code\n1 + 1\n\n\n[1] 2"
  },
  {
    "objectID": "section1.html",
    "href": "section1.html",
    "title": "Research",
    "section": "",
    "text": "Hide code\nMyFrame = as.data.frame(\n                  cbind(H = seq(0,1000,1),\n                        V = rnorm(length(seq(0,1000,1))))\n)\n\n\nlibrary(ggplot2)\n\nggplot(MyFrame, aes(H,V)) +\n  geom_point()"
  },
  {
    "objectID": "section2.html",
    "href": "section2.html",
    "title": "About",
    "section": "",
    "text": "Test text\n\n\nHide code\nMyFrame = as.data.frame(\n                  cbind(H = seq(0,1000,1),\n                        V = rnorm(length(seq(0,1000,1))))\n)\n\n\nlibrary(ggplot2)\n\nggplot(MyFrame, aes(H,V)) +\n  geom_point(col=\"red\")"
  },
  {
    "objectID": "section2.html#code",
    "href": "section2.html#code",
    "title": "About",
    "section": "Code",
    "text": "Code\n\n\nHide code\n2+3\n\n\n[1] 5"
  },
  {
    "objectID": "section2.html#more-code",
    "href": "section2.html#more-code",
    "title": "About",
    "section": "More Code",
    "text": "More Code\n\n\nHide code\n2+3+3/2\n\n\n[1] 6.5"
  },
  {
    "objectID": "license.html",
    "href": "license.html",
    "title": "Spatial Dynamics",
    "section": "",
    "text": "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "projects/index.html",
    "href": "projects/index.html",
    "title": "Projects",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Updated - Oldest\n        \n         \n          Updated - Newest\n        \n     \n  \n\n\n\n\n\n\n\n\n\n\nAttempt to create a Project Page\n\n\n0 min\n\n\nJust a webpage test\n\n\n\nMar 19, 2023\n\n\n\n\n\nMar 19, 2023\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/attempt1/index.html",
    "href": "projects/attempt1/index.html",
    "title": "Attempt to create a Project Page",
    "section": "",
    "text": "Not sure if this is working…\n\nSome Chunk\n\n\nHide code\n56/23\n\n\n[1] 2.434783\n\n\n\n\n\n\nCitationBibTeX citation:@online{2023,\n  author = {},\n  title = {Attempt to Create a {Project} {Page}},\n  date = {2023-03-19},\n  url = {https://jmhumphreys.github.io//projects/attempt1},\n  langid = {en}\n}\nFor attribution, please cite this work as:\n“Attempt to Create a Project Page.” 2023. March 19, 2023.\nhttps://jmhumphreys.github.io//projects/attempt1."
  },
  {
    "objectID": "pindex.html",
    "href": "pindex.html",
    "title": "Past, current, and aspirant projects",
    "section": "",
    "text": "Projects\n\nProjects here are more developed and complete than those found in Snippits.\n\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Updated - Oldest\n        \n         \n          Updated - Newest\n        \n     \n  \n\n\n\n\n\n\n \n\n\n\nCovidCAR Package Overview\n\n\n34 min\n\n\nCovidCAR is intended to facilitate Covid19 model building, ensembling, and evalutaion\n\n\n\nMay 18, 2023\n\n\n\n\n\nMay 23, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\nAttempt to create a Project Page\n\n\n0 min\n\n\nJust a webpage test\n\n\n\nMar 19, 2023\n\n\n\n\n\nMar 20, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\nAttempt to create a SECOND Project Page\n\n\n0 min\n\n\nAn entirely different fake project\n\n\n\nMar 19, 2023\n\n\n\n\n\nApr 10, 2023\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/attempt2/index.html",
    "href": "projects/attempt2/index.html",
    "title": "Attempt to create a SECOND Project Page",
    "section": "",
    "text": "Attempt at a second page.\n\nSome Chunk\n\n\nHide code\nplot(density(rnorm(1000)), col=\"red\")\n\n\n\n\n\n\n\nAnother Darned Chunk\n\nNot Pie\nA second chunk of code.\n\n\nHide code\n22/7\n\n\n[1] 3.142857\n\n\n\n\n\nYet, another\n\nChecking TOC\nA third chunk of code.\n\n\nHide code\n2+2+4+6/5\n\n\n[1] 9.2\n\n\n\n\n\n\n\nCitationBibTeX citation:@online{2023,\n  author = {},\n  title = {Attempt to Create a {SECOND} {Project} {Page}},\n  date = {2023-03-19},\n  url = {https://jmhumphreys.github.io//projects/attempt2},\n  langid = {en}\n}\nFor attribution, please cite this work as:\n“Attempt to Create a SECOND Project Page.” 2023. March 19,\n2023. https://jmhumphreys.github.io//projects/attempt2."
  },
  {
    "objectID": "projects/attempt2/index.html#not-pie",
    "href": "projects/attempt2/index.html#not-pie",
    "title": "Attempt to create a SECOND Project Page",
    "section": "Not Pie",
    "text": "Not Pie\nA second chunk of code.\n\n\nHide code\n22/7\n\n\n[1] 3.142857"
  },
  {
    "objectID": "snippits/snippit1/index.html",
    "href": "snippits/snippit1/index.html",
    "title": "snippit 1",
    "section": "",
    "text": "Long story short."
  },
  {
    "objectID": "snippits/snippit1/index.html#code-chunk",
    "href": "snippits/snippit1/index.html#code-chunk",
    "title": "snippit 1",
    "section": "Code chunk",
    "text": "Code chunk\n\n\nHide code\n76*25*0.04\n\n\n[1] 76"
  },
  {
    "objectID": "snippits/snippit1/index.html#code-chunk-again",
    "href": "snippits/snippit1/index.html#code-chunk-again",
    "title": "snippit 1",
    "section": "Code chunk again",
    "text": "Code chunk again\n\n\nHide code\npi*7\n\n\n[1] 21.99115"
  },
  {
    "objectID": "sindex.html",
    "href": "sindex.html",
    "title": "Abbrevaitaed workflows and small code blocks",
    "section": "",
    "text": "Snippits\n\nOne-off analyses and less developed code than found in Projects.\n\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Updated - Oldest\n        \n         \n          Updated - Newest\n        \n     \n  \n\n\n\n\n\n\n\nsnippit 1\n\n\n0 min\n\n\nJust a placeholder as I’m figuring things out\n\n\n\nMar 19, 2023\n\n\n\n\n\nMay 3, 2023\n\n\n\n\n\n\n\n\n\n\nsnippit 2\n\n\n0 min\n\n\nSeconf code placeholder\n\n\n\nMar 19, 2023\n\n\n\n\n\nMar 20, 2023\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "snippits/snippit2/index.html",
    "href": "snippits/snippit2/index.html",
    "title": "snippit 2",
    "section": "",
    "text": "Very important words."
  },
  {
    "objectID": "snippits/snippit2/index.html#code-chunk",
    "href": "snippits/snippit2/index.html#code-chunk",
    "title": "snippit 2",
    "section": "Code chunk",
    "text": "Code chunk\n\n\nHide code\n100/3\n\n\n[1] 33.33333"
  },
  {
    "objectID": "snippits/snippit2/index.html#code-chunk-again",
    "href": "snippits/snippit2/index.html#code-chunk-again",
    "title": "snippit 2",
    "section": "Code chunk again",
    "text": "Code chunk again\n\n\nHide code\nMyFrame = as.data.frame(\n                  cbind(H = seq(0,1000,1),\n                        V = rnorm(length(seq(0,1000,1))))\n)\n\n\nlibrary(ggplot2)\n\nggplot(MyFrame, aes(H,V)) +\n  geom_point(col=\"red\")\n\n\n\n\n\n```"
  },
  {
    "objectID": "projects/ccintro/ccintro.html",
    "href": "projects/ccintro/ccintro.html",
    "title": "CovidCAR Package Overview",
    "section": "",
    "text": "This introduction briefly outlines core functions used to preprocess observation data, build spatial-temporal models, and post-process model outputs. Its purpose is to demonstrate a standard workflow not to provide an in depth examination of functions or model building techniques.\n\n\n\nThe CovidCAR GitHub page\n\nCovidCAR Functions Reference site"
  },
  {
    "objectID": "projects/ccintro/ccintro.html#specifiy-dates-and-directories",
    "href": "projects/ccintro/ccintro.html#specifiy-dates-and-directories",
    "title": "CovidCAR Package Overview",
    "section": "Specifiy Dates and Directories",
    "text": "Specifiy Dates and Directories\nThe setup_analysis() function defines key date thresholds for model training and forecast horizon periods and should always be run before using any other functions in the CovidCAR package. The dates are written to a yaml file for use by other functions.\nThe function also allows for recording directory paths to (optionally) write outputs outside of the working directory or to pull previously cached observation data (cache as created with Covid19Forecast.v1).\n\n\nHide code\nmy_ouputs <- \"C:/Users/unp7/Desktop/Misc/CovidCAR_test\"\nmy_local <- \"C:/Users/unp7/Desktop/GitHub/covid19Forecasts/local/cache\"\n\nsetup_analysis(report_date = \"2021-08-23\", #report date, first forecast day\n               training_period = 2*28, #days\n               forecast_horizon = 28, #days\n               output_dir = my_ouputs, #write outputs here\n               local_cache_dir = my_local #cache\n)\n\n\n→ Your local cache will be available to get_covid19_obs()\n\n\n→ Analysis outputs will be written to C:/Users/unp7/Desktop/Misc/CovidCAR_test/2021-08-23-CovidCAR-run2023-05-23"
  },
  {
    "objectID": "projects/ccintro/ccintro.html#define-spatial-domain",
    "href": "projects/ccintro/ccintro.html#define-spatial-domain",
    "title": "CovidCAR Package Overview",
    "section": "Define Spatial Domain",
    "text": "Define Spatial Domain\nThe download_boundaries() function pulls US State and territorial boundaries (ESRI shapefiles) from sources in the public domain. Some basic projection is performed, the shapefile is converted to a SpatialPolygonsDataFrame, and data attributes for a location identifier (‘Region’) and name (‘State’) are appended to the object.\nNOTE: The function includes an option to download county boundaries (unit=“county”) but there are some timeout issues that need to be resolved due to large file size.\n\n\nHide code\nStates <- download_boundaries(unit = \"state\")\n\n\n→ Downloading polygon files...\n\n\nReading layer `us-state-boundaries' from data source \n  `C:\\Users\\unp7\\Desktop\\Misc\\CovidCAR_test\\2021-08-23-CovidCAR-run2023-05-23\\polygons' \n  using driver `ESRI Shapefile'\nSimple feature collection with 56 features and 20 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -179.2311 ymin: -14.60181 xmax: 179.8597 ymax: 71.44069\nGeodetic CRS:  WGS 84\n\n\nHide code\nclass(States)\n\n\n[1] \"SpatialPolygonsDataFrame\"\nattr(,\"package\")\n[1] \"sp\"\n\n\nHide code\nhead(States@data[,c(\"Region\", \"State\")]) #appended attributes  \n\n\n\n\n\n\nRegion\nState\n\n\n\n\n1\nVirgin Islands\n\n\n2\nWisconsin\n\n\n3\nVermont\n\n\n4\nNew Jersey\n\n\n5\nColorado\n\n\n6\nSouth Carolina"
  },
  {
    "objectID": "projects/ccintro/ccintro.html#adjacency-graph",
    "href": "projects/ccintro/ccintro.html#adjacency-graph",
    "title": "CovidCAR Package Overview",
    "section": "Adjacency Graph",
    "text": "Adjacency Graph\nThe get_neighbors() function is used to identify polygons (States and Territories in this example) that are located next to each other. Neighbor information is recorded in a matrix (dimensions: location*location) that is included with the CAR model. Estimates for any one location are then ‘conditional’ on the estimates for surrounding locations.\nNOTE: Polygons representing locations such as Hawaii and Guam are isolated from other locations (termed ‘islands’) and can be problematic. One option in this situation is to force connections between locations; the function’s ‘connect’ option will force connections between islands and other locations based on proximity.\nExample: Islands with “no links”\n\n\nHide code\nnb_islands = get_neighbors(States, connect=FALSE)\nsummary(nb_islands) #note that \"7 regions with no links\"\n\n\nNeighbour list object:\nNumber of regions: 56 \nNumber of nonzero links: 224 \nPercentage nonzero weights: 7.142857 \nAverage number of links: 4 \n7 regions with no links:\n1 24 32 33 38 42 54\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8 \n 7  1  4  9  9 10 12  2  2 \n1 least connected region:\n13 with 1 link\n2 most connected regions:\n49 56 with 8 links\n\n\nExample: All locations linked\n\n\nHide code\nnb_coerced = get_neighbors(States, connect=TRUE)\nsummary(nb_coerced)\n\n\nNeighbour list object:\nNumber of regions: 56 \nNumber of nonzero links: 242 \nPercentage nonzero weights: 7.716837 \nAverage number of links: 4.321429 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8 \n 5  3 10 12 10 11  3  2 \n5 least connected regions:\n1 13 38 42 54 with 1 link\n2 most connected regions:\n49 56 with 8 links\n\n\nView mapped adjacency\nThe plot_neighbors() function overlays adjacency connections on mapped location boundaries.\n\n\nHide code\nplot_neighbors(States, nb_islands)\n\n\nRegions defined for each Polygons\n\n\n\n\n\nHide code\nplot_neighbors(States, nb_coerced)\n\n\nRegions defined for each Polygons\n\n\n\n\n\nConvert to INLA Graph The nb2INLA() and inla.read.graph() functions are provided by the INLA package.\n\n\nHide code\nnb2INLA(\"J\", nb_coerced)\nJ = inla.read.graph(\"J\")"
  },
  {
    "objectID": "projects/ccintro/ccintro.html#demographic-data",
    "href": "projects/ccintro/ccintro.html#demographic-data",
    "title": "CovidCAR Package Overview",
    "section": "Demographic Data",
    "text": "Demographic Data\nThe getPovertyPop() function provides a wrapper function for the getCensus package for loading American Community Survey (ACS) data from the U.S. Census Bureau. In this example, an API key (‘secret_api’) is used to pull the percent of each state’s total population in poverty (SAEPOVRTALL_PT) and the number of individuals over the age of 55yrs (given in the vars_pop option).\n\n\n\n\n\nHide code\nPovPop_data = getPovertyPop(key = get_api(\"censusapi\"), #function reads 'secrets.yaml' for specified name\n                            vars_pov = c(\"SAEPOVRTALL_PT\"), \n                            vars_pop = c('AGEGROUP','POP'), \n                            filt_age = c(12,18))\n\n\n\n\nHide code\ntrain_data = left_join(train_data, PovPop_data, by = \"location\")"
  },
  {
    "objectID": "projects/ccintro/ccintro.html#rt-estimation",
    "href": "projects/ccintro/ccintro.html#rt-estimation",
    "title": "CovidCAR Package Overview",
    "section": "Rt Estimation",
    "text": "Rt Estimation\nThe Rt_projection() function combines the estimate_R() function from the EpiEstim package with simple timeseries models to forecast Rt estimated over the model training period across the forecast horizon (28 days in the future). Both the ‘raw’ Rt estimate (‘Rt_raw’) for the observation period only and the forecast values (‘Rt’) are added to the dataframe.\n\nForecast models include:\n\nsimple ARIMA model using the forecast package (method=“arima”)\n\nan order-2 random walk with noise and trend using the INLA package (method=“dlm)\n\nNOTE: This is an experimental function and the “dlm” method is used as an example. Models later in this demo will use the Rt_raw value to forecast concurrently with incidence estimation.\n\n\nHide code\nRt_df = Rt_projection(train_data, mean_si = 5.7, std_si = 2, \n                      forecast_horizon = 28, method = \"dlm\")\n\n\nRt Estimates\nChecking Rt_projection() results\n\n\nHide code\nRt_df[1:10,] #check values\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndate\nvalue\nsignal\nlocation\nlocation_name\nday\ntrn_tst\nRegion\nSAEPOVRTALL_PT\nage_pop\nRt_raw\nRt\n\n\n\n\n2021-06-28\n2\nhosp\n02\nAlaska\nMonday\ntrain\n38\n9.6\n184927\nNA\nNA\n\n\n2021-06-29\n5\nhosp\n02\nAlaska\nTuesday\ntrain\n38\n9.6\n184927\nNA\nNA\n\n\n2021-06-30\n2\nhosp\n02\nAlaska\nWednesday\ntrain\n38\n9.6\n184927\nNA\nNA\n\n\n2021-07-01\n6\nhosp\n02\nAlaska\nThursday\ntrain\n38\n9.6\n184927\nNA\nNA\n\n\n2021-07-02\n3\nhosp\n02\nAlaska\nFriday\ntrain\n38\n9.6\n184927\nNA\nNA\n\n\n2021-07-03\n7\nhosp\n02\nAlaska\nSaturday\ntrain\n38\n9.6\n184927\nNA\nNA\n\n\n2021-07-04\n3\nhosp\n02\nAlaska\nSunday\ntrain\n38\n9.6\n184927\nNA\nNA\n\n\n2021-07-05\n2\nhosp\n02\nAlaska\nMonday\ntrain\n38\n9.6\n184927\n3.295300\n3.272205\n\n\n2021-07-06\n5\nhosp\n02\nAlaska\nTuesday\ntrain\n38\n9.6\n184927\n2.304267\n2.334882\n\n\n2021-07-07\n4\nhosp\n02\nAlaska\nWednesday\ntrain\n38\n9.6\n184927\n1.858476\n1.848652\n\n\n\n\n\n\nHide code\nRt_df %>% \n  filter(trn_tst == \"test\") %>% \n  slice(1:10) #check values (forecast period)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndate\nvalue\nsignal\nlocation\nlocation_name\nday\ntrn_tst\nRegion\nSAEPOVRTALL_PT\nage_pop\nRt_raw\nRt\n\n\n\n\n2021-08-24\n15\nhosp\n02\nAlaska\nTuesday\ntest\n38\n9.6\n184927\nNA\n1.018219\n\n\n2021-08-25\n33\nhosp\n02\nAlaska\nWednesday\ntest\n38\n9.6\n184927\nNA\n1.051613\n\n\n2021-08-26\n18\nhosp\n02\nAlaska\nThursday\ntest\n38\n9.6\n184927\nNA\n1.085007\n\n\n2021-08-27\n21\nhosp\n02\nAlaska\nFriday\ntest\n38\n9.6\n184927\nNA\n1.118401\n\n\n2021-08-28\n14\nhosp\n02\nAlaska\nSaturday\ntest\n38\n9.6\n184927\nNA\n1.151794\n\n\n2021-08-29\n19\nhosp\n02\nAlaska\nSunday\ntest\n38\n9.6\n184927\nNA\n1.185188\n\n\n2021-08-30\n32\nhosp\n02\nAlaska\nMonday\ntest\n38\n9.6\n184927\nNA\n1.218582\n\n\n2021-08-31\n22\nhosp\n02\nAlaska\nTuesday\ntest\n38\n9.6\n184927\nNA\n1.251977\n\n\n2021-09-01\n22\nhosp\n02\nAlaska\nWednesday\ntest\n38\n9.6\n184927\nNA\n1.285371\n\n\n2021-09-02\n23\nhosp\n02\nAlaska\nThursday\ntest\n38\n9.6\n184927\nNA\n1.318765"
  },
  {
    "objectID": "projects/ccintro/ccintro.html#clean-dataframe",
    "href": "projects/ccintro/ccintro.html#clean-dataframe",
    "title": "CovidCAR Package Overview",
    "section": "Clean Dataframe",
    "text": "Clean Dataframe\nThe time_index() function is used to recode a date vector to the desired timestep duration (2-day steps, 1 week steps, etc).\n\n\nHide code\ntrain_data <- as.data.frame(Rt_df) %>%\n  mutate(\n    s_pop = log(age_pop), #log scale\n    s_pov = as.numeric(scale(SAEPOVRTALL_PT)), #some NAs present.  \n    doy = as.integer(as.factor(date)),\n    doy.1 = doy,\n    Region.Wk = paste0(\"ID\", Region, \"W\", doy), #unique Region*doy combinations ('space-time interaction')\n    ID.Region.Wk = as.integer(as.factor(Region.Wk)), #convert factor levels to integer\n    week = week(date),\n    int_week.1 = as.integer(as.factor(week)),\n    int_week.2 = int_week.1,\n    int_week.3 = int_week.1,\n    threeday_indx = time_index(date, seq(min(date), max(date), by = \"3 days\")),\n    threeday_indx.1 = as.integer(as.factor(threeday_indx)),\n    fourday_indx = time_index(date, seq(min(date), max(date), by = \"4 days\")),\n    fourday_indx.1 = as.integer(as.factor(fourday_indx)),\n    fiveday_indx = time_index(date, seq(min(date), max(date), by = \"5 days\")),\n    fiveday_indx.1 = as.integer(as.factor(fiveday_indx)),\n    eightday_indx = time_index(date, seq(min(date), max(date), by = \"8 days\")),\n    eightday_indx.1 = as.integer(as.factor(eightday_indx)),\n    biweek_indx = time_index(date, seq(min(date), max(date), by = \"14 days\")),\n    biweek_indx.1 = as.integer(as.factor(biweek_indx)),\n    Region.1 = Region, Region.2 = Region, Region.3 = Region, \n                Region.4 = Region, Region.5 = Region\n  ) %>%\n  select(c(-biweek_indx, threeday_indx, fourday_indx, fiveday_indx, eightday_indx))\n\nhead(train_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndate\nvalue\nsignal\nlocation\nlocation_name\nday\ntrn_tst\nRegion\nSAEPOVRTALL_PT\nage_pop\nRt_raw\nRt\ns_pop\ns_pov\ndoy\ndoy.1\nRegion.Wk\nID.Region.Wk\nweek\nint_week.1\nint_week.2\nint_week.3\nthreeday_indx\nthreeday_indx.1\nfourday_indx\nfourday_indx.1\nfiveday_indx\nfiveday_indx.1\neightday_indx\neightday_indx.1\nbiweek_indx.1\nRegion.1\nRegion.2\nRegion.3\nRegion.4\nRegion.5\n\n\n\n\n2021-06-28\n2\nhosp\n02\nAlaska\nMonday\ntrain\n38\n9.6\n184927\nNA\nNA\n12.12772\n-0.8064822\n1\n1\nID38W1\n2466\n26\n1\n1\n1\n2021-06-28\n1\n2021-06-28\n1\n2021-06-28\n1\n2021-06-28\n1\n1\n38\n38\n38\n38\n38\n\n\n2021-06-29\n5\nhosp\n02\nAlaska\nTuesday\ntrain\n38\n9.6\n184927\nNA\nNA\n12.12772\n-0.8064822\n2\n2\nID38W2\n2477\n26\n1\n1\n1\n2021-06-28\n1\n2021-06-28\n1\n2021-06-28\n1\n2021-06-28\n1\n1\n38\n38\n38\n38\n38\n\n\n2021-06-30\n2\nhosp\n02\nAlaska\nWednesday\ntrain\n38\n9.6\n184927\nNA\nNA\n12.12772\n-0.8064822\n3\n3\nID38W3\n2488\n26\n1\n1\n1\n2021-07-01\n2\n2021-06-28\n1\n2021-06-28\n1\n2021-06-28\n1\n1\n38\n38\n38\n38\n38\n\n\n2021-07-01\n6\nhosp\n02\nAlaska\nThursday\ntrain\n38\n9.6\n184927\nNA\nNA\n12.12772\n-0.8064822\n4\n4\nID38W4\n2499\n26\n1\n1\n1\n2021-07-01\n2\n2021-07-02\n2\n2021-07-03\n2\n2021-06-28\n1\n1\n38\n38\n38\n38\n38\n\n\n2021-07-02\n3\nhosp\n02\nAlaska\nFriday\ntrain\n38\n9.6\n184927\nNA\nNA\n12.12772\n-0.8064822\n5\n5\nID38W5\n2510\n27\n2\n2\n2\n2021-07-01\n2\n2021-07-02\n2\n2021-07-03\n2\n2021-06-28\n1\n1\n38\n38\n38\n38\n38\n\n\n2021-07-03\n7\nhosp\n02\nAlaska\nSaturday\ntrain\n38\n9.6\n184927\nNA\nNA\n12.12772\n-0.8064822\n6\n6\nID38W6\n2521\n27\n2\n2\n2\n2021-07-04\n3\n2021-07-02\n2\n2021-07-03\n2\n2021-07-06\n2\n1\n38\n38\n38\n38\n38"
  },
  {
    "objectID": "projects/ccintro/ccintro.html#response-variable",
    "href": "projects/ccintro/ccintro.html#response-variable",
    "title": "CovidCAR Package Overview",
    "section": "Response Variable",
    "text": "Response Variable\nThe response variable may differ between models. In this case, copying hospital incidence (counts) to a new column, standardizing the distribution, and ensuring that observations for the forecast horizon are coded as NA. Retaining the scaling object and rewriting as function obs_scale() to transform model outputs back to the observation scale later.\nAgain, response variables are specific to individual model setup so could be scaled differently or not at all to be fit with a different likelihood (Poisson, NegBinomial, etc). Keeping it simple here.\n\n\nHide code\ntrain_data$resp = ifelse(train_data$trn_tst == \"train\", train_data$value, NA) #Set obs value to NA for forecasts periods\n\nresp_scale_obj = scale(train_data$resp, scale=T, center=T) #scaled object\nobs_scale = function(r)r*attr(resp_scale_obj,'scaled:scale') + attr(resp_scale_obj, 'scaled:center') #transform back to observation scale\n\ntrain_data$nrm_resp = as.numeric(resp_scale_obj)"
  },
  {
    "objectID": "projects/ccintro/ccintro.html#format-as-a-datastack",
    "href": "projects/ccintro/ccintro.html#format-as-a-datastack",
    "title": "CovidCAR Package Overview",
    "section": "Format as a Datastack",
    "text": "Format as a Datastack\nIn this example, data could remain as a dataframe and passed to INLA directly, but as a matter of practice, it is better to format as a list object (datastack).\n\n\nHide code\nnrm.lst = list(list(intercept1 = rep(1, dim(train_data)[1])), #custom intercept\n          list(pov_pct = train_data[,\"s_pov\"],                #desired covariates and indices below\n               pop = train_data[,\"s_pop\"],                    #formatting as nrm.lst = list()\n               Rt_raw = train_data[,\"Rt_raw\"],\n               Rt_raw.1 = train_data[,\"Rt_raw\"],\n               Rt = train_data[,\"Rt\"],\n               Rt.1 = train_data[,\"Rt\"],\n               doy = train_data[,\"doy\"],\n               doy.1 = train_data[,\"doy.1\"],\n               doy.2 = train_data[,\"doy.1\"],\n               int_week.1 = train_data[,\"int_week.1\"],\n               int_week.2 = train_data[,\"int_week.2\"],\n               int_week.3 = train_data[,\"int_week.3\"],\n               threeday_indx.1 = train_data[,\"threeday_indx.1\"],\n               fourday_indx.1 = train_data[,\"fourday_indx.1\"],\n               fiveday_indx.1 = train_data[,\"fiveday_indx.1\"],\n               eightday_indx.1 = train_data[,\"eightday_indx.1\"],\n               biwek_indx.1 = train_data[,\"biweek_indx.1\"],\n               Region.1 = train_data[,\"Region.1\"],\n               Region.2 = train_data[,\"Region.2\"],\n               Region.3 = train_data[,\"Region.3\"],\n               Region.4 = train_data[,\"Region.4\"],\n               Region.5 = train_data[,\"Region.5\"],\n               Region_Wk = train_data[,\"ID.Region.Wk\"],\n               dow = train_data[,\"day\"]))\n\nnrm.stk = inla.stack(data = list(Y = train_data$nrm_resp), #Y is response variable\n                                      A = list(1,1),       #option to include matrices, not used in this case\n                                effects = nrm.lst,         #list object from above\n                                    tag = \"nrm\")           #arbitrary name to index searches later \n                                                           #(multiple datastack used in complex models)"
  },
  {
    "objectID": "projects/ccintro/ccintro.html#set-priors",
    "href": "projects/ccintro/ccintro.html#set-priors",
    "title": "CovidCAR Package Overview",
    "section": "Set Priors",
    "text": "Set Priors\n\n\nHide code\n#bym prior\nbym_hyper <- list(phi = list(prior = \"pc\", \n                      param = c(0.5, 2/3), \n                      initial = 3), \n               prec = list(prior = \"pc.prec\", \n                       param = c(1, 0.01), \n                       initial = 1.5))  \n#Normal prior\nnorm.prior <- list(theta=list(prior = \"normal\", \n                              param=c(0, 1)))\n\n\n#iid prior\npc_prec_iid <- list(theta = list(prior=\"pc.prec\", \n                                 param=c(0.5, 0.01)))\n\n#ar1 prior\npc_cor_ar1 <- list(theta = list(prior = 'pccor1', \n                                param = c(0.5, 0.9)))\n\n#rw2 prior\npc_rw2 <- list(prec=list(prior=\"pc.prec\", \n                         param=c(0.5,0.01)))\n\n#bundle priors to archive run\npriors.list <- list()\npriors.list[[\"bym_hyper\"]] <- bym_hyper\npriors.list[[\"norm.prior\"]] <- norm.prior\npriors.list[[\"pc_prec_iid\"]] <- pc_prec_iid\npriors.list[[\"pc_cor_ar1\"]] <- pc_cor_ar1\npriors.list[[\"pc_rw2\"]] <- pc_rw2"
  },
  {
    "objectID": "projects/ccintro/ccintro.html#specify-formulas",
    "href": "projects/ccintro/ccintro.html#specify-formulas",
    "title": "CovidCAR Package Overview",
    "section": "Specify Formulas",
    "text": "Specify Formulas\nFormula 1: Random Walk plus noise for each location (i.e., state)\n\n\nHide code\nFrm.1 = Y ~ -1 +     #remove default intercept\n  intercept1 +       #custom intercept\n  f(doy.1,           #order by time index (daily)\n    constr=TRUE,     #enforced zero mean\n    model=\"rw1\",     #order-1 random walk with noise\n    scale.model = TRUE, #additional internal scaling\n    group = Region.1, #run rw1 model for groups based on location \n    control.group=list(model=\"iid\"), #groups are treated independently\n    hyper=pc_rw2)  #prior for rw2\n\n\nFormula 2: Random Walk plus noise and trend for each location\n\n\nHide code\nFrm.2 = Y ~ -1 +     \n  intercept1 +       \n  f(doy.1,           \n    constr=TRUE,     \n    model=\"rw1\",    \n    scale.model = TRUE, \n    group = Region.1, \n    control.group=list(model=\"iid\"), \n    hyper=pc_rw2) + \n  f(doy.2, model=\"linear\", mean.linear = 0, prec.linear = 0.001) #add linear trend to rw1\n\n\nFormula 3: Common spatial effect for timesteps but each location has separate autoregression\n\n\nHide code\nFrm.3 = Y ~ -1 +    \n  intercept1 +       \n  f(Region.1,        #location index\n    model=\"bym2\",    #spatial effect, Besag-York-Mollie model (the 2 indicates scaling) \n    graph=J,         #Adjacency graph to identify neighbors\n    constr=TRUE,     #enforced zero mean\n    hyper=bym_hyper) + #BYM prior\n  f(doy.1,             #order by time index (daily)\n    model=\"ar1\",       #apply order-1 autoregressive\n    constr=TRUE,\n    group = Region.1,  #run ar1 model for groups based on location\n    control.group=list(model=\"iid\"), #groups are treated independently\n    hyper=pc_cor_ar1) \n\n\nFormula 4: Separate spatial effect for each timestep (related by ar1) and each location has its own autoregressive term.\n\n\nHide code\nFrm.4 = Y ~ -1 +     \n  intercept1 +       \n  f(Region.1,        \n    model=\"bym2\",   \n    graph=J,         \n    constr=TRUE,     \n    group = doy,     #time index, daily (create separate realizations of spatial covariate for each day)\n    control.group=list(model=\"ar1\"), #groups are related via an order-1 autoregressive\n    hyper=bym_hyper) + #prior for BYM\n  f(doy.1,             \n    model=\"ar1\",       \n    constr=TRUE,\n    group = Region.1,  \n    control.group=list(model=\"iid\"), \n    hyper=pc_cor_ar1) \n\n\nFormula 5: As Formula 4 but with space-time interaction to capture location and time specific variation outside of modeled trends.\n\n\nHide code\nFrm.5 = Y ~ -1 +    \n  intercept1 +       \n  f(Region.1,        \n    model=\"bym2\",    \n    graph=J,         \n    constr=TRUE,    \n    group = doy,     \n    control.group=list(model=\"ar1\"),\n    hyper=bym_hyper) +\n  f(doy.1,             \n    model=\"ar1\",       \n    constr=TRUE,\n    group = Region.1,  \n    control.group=list(model=\"iid\"), \n    hyper=pc_cor_ar1) +\n  f(Region_Wk,   #Index for all location*time combinations (space-time interaction)\n    model=\"iid\", #each location and time combination considered independently\n    constr=TRUE,\n    hyper=pc_prec_iid) \n\n\nFormula 6: As Formula 5 but adding covariate for variation due to day of week (e.g. Monday, Tuesday,…Sunday).\n\n\nHide code\nFrm.6 = Y ~ -1 +    \n  intercept1 +       \n  f(Region.1,        \n    model=\"bym2\",    \n    graph=J,         \n    constr=TRUE,     \n    group = doy,     \n    hyper=bym_hyper, \n    control.group=list(model=\"ar1\")) +\n  f(doy.1,             \n    model=\"ar1\",       \n    constr=TRUE,\n    group = Region.1,  \n    control.group=list(model=\"iid\"), \n    hyper=pc_cor_ar1) +\n  f(dow,           #discrete variable indicating day of week, e.g. Monday, Tuesday,...Sunday\n    constr=TRUE,\n    model=\"iid\",   #days of week may vary independently\n    group = Region.2, #variation attributed to days of week may differ by location\n    control.group=list(model=\"iid\"), \n    hyper=pc_prec_iid) +\n  f(Region_Wk,   \n    model=\"iid\", \n    constr=TRUE,\n    hyper=pc_prec_iid) \n\n\nFormula 7: Including Rt estimates as an experimental covariate. Forecast Rt trend estimated from the observation period (training period) to the future (28 days) using an autoregressive model.\n\n\nHide code\nFrm.7 = Y ~ -1 +     \n  intercept1 +       \n  pov_pct + pop +    \n  f(Region.1,        \n    model=\"bym2\",    \n    graph=J,        \n    constr=TRUE,     \n    group = doy,     \n    hyper=bym_hyper, \n    control.group=list(model=\"ar1\")) + \n  f(doy.1, Rt_raw,  #order by time index (daily) but weight each timestep by corresponding Rt_raw estimate\n    model=\"ar1\",    #apply order-1 autoregressive to Rt weighted time index above\n    constr=TRUE,\n    group = Region.2, \n    control.group=list(model=\"iid\"),\n    hyper=pc_cor_ar1) +\n  f(dow,           \n    constr=TRUE,\n    model=\"iid\",\n    group = Region.3,\n    control.group=list(model=\"iid\"),\n    hyper=pc_prec_iid) +\n  f(Region_Wk,   \n    model=\"iid\", \n    constr=TRUE,\n    hyper=pc_prec_iid) \n\n\nFormula 8: As with Formula 8 but adding a random walk at a more coarse time scale (3 day steps) to reduce forecast decay.\n\n\nHide code\nFrm.8 = Y ~ -1 +     \n  intercept1 +       \n  pov_pct + pop +    #linear covariates for poverty and population over 55yrs\n  f(Region.1,        \n    model=\"bym2\",    \n    graph=J,        \n    constr=TRUE,     \n    group = doy,    \n    hyper=bym_hyper, \n    control.group=list(model=\"ar1\")) + \n  f(threeday_indx.1, #time index, 3days\n    constr=TRUE,\n    model=\"rw2\",     #order-2 random walk with noise\n    scale.model = TRUE,\n    group = Region.2,\n    control.group=list(model=\"iid\"), \n    hyper=pc_rw2) + \n  f(doy.1, Rt_raw,  \n    model=\"ar1\",    \n    constr=TRUE,\n    group = Region.3, \n    control.group=list(model=\"iid\"),\n    hyper=pc_cor_ar1) +\n  f(dow,           \n    constr=TRUE,\n    model=\"iid\",\n    group = Region.4,\n    control.group=list(model=\"iid\"),\n    hyper=pc_prec_iid) +\n  f(Region_Wk,   \n    model=\"iid\", \n    constr=TRUE,\n    hyper=pc_prec_iid) \n\n\nOrganize Formulas\n\n\nHide code\nformulas.list <- list()\nformulas.list[[\"base_rw1\"]] <- Frm.1\nformulas.list[[\"rw1_trend\"]] <- Frm.2\nformulas.list[[\"base_car\"]] <- Frm.3\nformulas.list[[\"car_time\"]] <- Frm.4\nformulas.list[[\"car_sti\"]] <- Frm.5\nformulas.list[[\"car_wdays\"]] <- Frm.6\nformulas.list[[\"car_rt\"]] <- Frm.7\nformulas.list[[\"car_full\"]] <- Frm.8"
  },
  {
    "objectID": "projects/ccintro/ccintro.html#run-all-models",
    "href": "projects/ccintro/ccintro.html#run-all-models",
    "title": "CovidCAR Package Overview",
    "section": "Run All Models",
    "text": "Run All Models\n\n\nHide code\nformulas.list = formulas.list[c(1:4)] #short list for demo, fast run models\n\nmodels_out = run_model_list(formulas.list=formulas.list,\n                            dataStack=nrm.stk,\n                            likelihood = \"gaussian\",\n                            config=FALSE, verbose = FALSE, archive=TRUE)"
  },
  {
    "objectID": "projects/ccintro/ccintro.html#wis-scores",
    "href": "projects/ccintro/ccintro.html#wis-scores",
    "title": "CovidCAR Package Overview",
    "section": "WIS Scores",
    "text": "WIS Scores\nThe score_WIS() function calculates the WIS score for forecasts by model. Optional arguments can be included to indicate if files should be read from a directory (ingest = “path”), a dataframe in the environment (ingest = “dataframe”),or from a list object with individual file paths (ingest = “list”) as returned by extract_forecasts().\nThe ‘missing’ option can be used to specify how missing observation data should be handled; ‘remove’ from data or fill with ‘zero’.\n\n\nHide code\nmy_truth <- train_data %>% #Caution: my_truth may be different than your truth :)\n  select(date, location, value)\n\nmy_scores <- score_WIS(forecast_data = forecast_paths, truth=my_truth, \n                       ingest = \"list\", missing = \"remove\") \n\n\n→ A total of 2668 predictions weren't evalauted due lack of truth data\n\n\nHide code\nhead(my_scores)\n\n\n\n\n\n\nmodel\ndate\nlocation_name\nforecast_date\nWIS\n\n\n\n\nbase_car\n2021-08-23\n01\n2021-08-23\n0.5471048\n\n\nbase_car\n2021-08-23\n02\n2021-08-23\n0.5186350\n\n\nbase_car\n2021-08-23\n04\n2021-08-23\n0.5279331\n\n\nbase_car\n2021-08-23\n05\n2021-08-23\n0.5578004\n\n\nbase_car\n2021-08-23\n06\n2021-08-23\n0.5507474\n\n\nbase_car\n2021-08-23\n08\n2021-08-23\n0.5235968\n\n\n\n\n\n\nHide code\n#overall\nwis_rank <- my_scores %>%\n  group_by(model) %>%\n  summarise(mean_wis = mean(WIS)) %>%\n  arrange(mean_wis) %>%\n  mutate(wisRank = row_number())\n\nwis_rank #mean absolute values\n\n\n\n\n\n\nmodel\nmean_wis\nwisRank\n\n\n\n\nbase_car\n34.41192\n1\n\n\ncar_time\n34.46840\n2\n\n\nbase_rw1\n280.88099\n3\n\n\nrw1_trend\n307.12383\n4\n\n\n\n\n\n\nDiagnostic score plots\nThe plot_WIS_lines() function has options to make quick plots of WIS scores returned by score_WIS().\n\n\nHide code\nunique(my_scores$model)\n\n\n[1] \"base_car\"  \"base_rw1\"  \"car_time\"  \"rw1_trend\"\n\n\nHide code\n#lines showing absolute WIS\nplot_WIS_lines(my_scores, by = \"date\", range = \"abs\")\n\n\n\n\n\nHide code\n#lines showing scaled WIS\nplot_WIS_lines(my_scores, by = \"date\", range = \"scaled\", \n               scale_model = \"base_rw1\")\n\n\n\n\n\nHide code\n#optional 'limit' that recodes: (WIS >= limit) -> limit\nplot_WIS_lines(my_scores, by = \"date\", range = \"scaled\", \n               scale_model = \"base_rw1\", limit = 2)\n\n\n\n\n\nHide code\n#tile option\nplot_WIS_lines(my_scores, by = \"tile\", range = \"scaled\", \n               scale_model = \"base_rw1\", limit = 2)\n\n\nWarning: Removed 432 rows containing missing values (`geom_tile()`)."
  },
  {
    "objectID": "projects/ccintro/ccintro.html#mean-absolute-error-mae",
    "href": "projects/ccintro/ccintro.html#mean-absolute-error-mae",
    "title": "CovidCAR Package Overview",
    "section": "Mean Absolute Error (MAE)",
    "text": "Mean Absolute Error (MAE)\nThe score_MAE() function works comparably to score_WIS() but is a simpler measure of model performance as it is based on only the point estimates from forecasts.\n\n\nHide code\nmy_mae <- score_MAE(forecast_data = forecast_paths, truth=my_truth, ingest = \"list\", missing = \"remove\") \n\n\n→ A total of 116 forecasts weren't evaluatd due lack of truth data\n\n\nHide code\nmy_mae\n\n\n\n\n\n\nmodel\nMAE\nMAPE\nmaeRank\n\n\n\n\nbase_car\n41.2\n0.01243\n1\n\n\ncar_time\n42.0\n0.01266\n2\n\n\nbase_rw1\n325.6\n0.09818\n3\n\n\nrw1_trend\n353.3\n0.10652\n4"
  },
  {
    "objectID": "projects/ccintro/ccintro.html#ensemble-re-scoring",
    "href": "projects/ccintro/ccintro.html#ensemble-re-scoring",
    "title": "CovidCAR Package Overview",
    "section": "Ensemble Re-scoring",
    "text": "Ensemble Re-scoring\nNow that new ensembles have been added to the ‘forecasts’ directory, comparison scores can be recalculated.\n\n\nHide code\nmyDir <- file.path(su_yaml$out_dir_name, \"forecasts\")\nnew_mae <- score_MAE(forecast_data = myDir, truth=my_truth, ingest = \"path\", missing = \"remove\") \n\n\n→ A total of 203 forecasts weren't evaluatd due lack of truth data\n\n\nHide code\nnew_mae\n\n\n\n\n\n\nmodel\nMAE\nMAPE\nmaeRank\n\n\n\n\nbase_car\n41.2\n0.01243\n1\n\n\ncar_time\n42.0\n0.01266\n2\n\n\nmae_ensemble\n50.8\n0.01532\n3\n\n\nequal_mae_ensemble\n105.5\n0.03180\n4\n\n\nwis_ensemble\n120.6\n0.03638\n5\n\n\nbase_rw1\n325.6\n0.09818\n6\n\n\nrw1_trend\n353.3\n0.10652\n7"
  },
  {
    "objectID": "projects/ccintro/ccintro.html#historic-forecasts",
    "href": "projects/ccintro/ccintro.html#historic-forecasts",
    "title": "CovidCAR Package Overview",
    "section": "Historic Forecasts",
    "text": "Historic Forecasts\nThe get_hub_forecasts() function retrieves forecasts previously submitted to the covid19-forecast-hub.\nSimilar to get_covid19_obs(), there are options to load from a local parquet cache (source=“cache”) as indexed with the Covid19Forecasts package(private repo) or to load “test” data included with the package. There is also the an option to use the covidHubUtils package to download data directly from covid19-forecast-hub.\nThe queried results can also be filtered to specific models using the ‘models=’ option. If not set, the ‘model=’ options defaults to forecasts from the COVIDhub-trained_ensemble, COVIDhub-ensemble, and COVIDhub-baseline models.\nBy default, get_hub_forecasts() returns forecasts for the forecast period specified during initial setup using setup_analysis().\n\n\nHide code\nhist_forecasts <- get_hub_forecasts(source = \"covidHubUtils\",\n                                    models = c(\"COVIDhub-trained_ensemble\", \"COVIDhub-baseline\", \"COVIDhub-ensemble\"),\n                                    write_copy = TRUE)\n\n\n→ Loading location crosswalk\n\n\nRows: 57 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"|\"\nchr (4): STATE, STUSAB, STATE_NAME, STATENS\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n→ Fetching COVID-19 forecasts using covidHubUtils\n\nget_token(): POST: https://zoltardata.com/api-token-auth/\n\nget_resource(): GET: https://zoltardata.com/api/projects/\n\nget_resource(): GET: https://zoltardata.com/api/project/44/models/\n\nget_resource(): GET: https://zoltardata.com/api/project/44/timezeros/\n\n→ Writing forecast data to analysis directory\n\n\nHide code\ndim(hist_forecasts)\n\n\n[1] 103032      7\n\n\nHide code\nhead(hist_forecasts)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodel\nforecast_date\nlocation\ntarget_end_date\ntype\nquantile\nvalue\n\n\n\n\nCOVIDhub-trained_ensemble\n2021-08-23\n01\n2021-08-24\npoint\nNA\n495\n\n\nCOVIDhub-trained_ensemble\n2021-08-23\n01\n2021-08-24\nquantile\n0.010\n369\n\n\nCOVIDhub-trained_ensemble\n2021-08-23\n01\n2021-08-24\nquantile\n0.025\n384\n\n\nCOVIDhub-trained_ensemble\n2021-08-23\n01\n2021-08-24\nquantile\n0.050\n395\n\n\nCOVIDhub-trained_ensemble\n2021-08-23\n01\n2021-08-24\nquantile\n0.100\n404\n\n\nCOVIDhub-trained_ensemble\n2021-08-23\n01\n2021-08-24\nquantile\n0.150\n412\n\n\n\n\n\n\nHide code\n#because data is formatted to same standard, functions can read\nhub_rank <- score_WIS(forecast_data = hist_forecasts, truth=my_truth, \n                      ingest = \"dataframe\", missing = \"remove\")\n\nhub_rank %>%\n  group_by(model) %>%\n  summarise(mean_wis = mean(WIS))\n\n\n\n\n\n\nmodel\nmean_wis\n\n\n\n\nCOVIDhub-baseline\n45.61759\n\n\nCOVIDhub-ensemble\n50.61499\n\n\nCOVIDhub-trained_ensemble\n68.17765\n\n\n\n\n\n\nCombine with CovidCAR models\nThe plot_forecasts_compare() function combines plot_WIS_lines() and score_WIS() to make a model WIS comparison line plot. The ‘hub_forecasts’ option facilitates direct use of imported historical forecast data from the Covid19-forecast-hub.\n\n\nHide code\nmy_plot <- plot_forecasts_compare(forecast_data = myDir, truth=my_truth, ingest = \"path\",\n                                  hub_forecasts = hist_forecasts,\n                                  scale_model = \"COVIDhub-baseline\",\n                                  limit = 4,\n                                  missing = \"remove\",\n                                  write_copy = TRUE)\n\n\n→ A total of 4669 predictions weren't evalauted due lack of truth data\n\n\n→ Writing comparison scores to analysis directory\n\n\nHide code\nclass(my_plot)\n\n\n[1] \"gg\"     \"ggplot\"\n\n\nHide code\nmy_plot"
  }
]